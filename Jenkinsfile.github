/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library@main') _

// Find the latest go-version here: https://go.dev/VERSION?m=text
def goVersion = '1.18'

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

// Only main or maint/* branches are stable.
def promotionToken = ~"(main|maint\\/.*)"
def isStable = env.BRANCH_NAME ==~ promotionToken ? true : false
pipeline {

    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "1"))
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    // Run every week on Sunday at 4 PM, long after the base image has rebuilt from that morning.
    triggers{ cron('H 16 * * 0') }

    environment {
        DOCKER_ARGS = getDockerBuildArgs(name: getRepoName(), description: 'A build environment for Go.')
        DOCKER_BUILDKIT = 1
        GO_VERSION = "${goVersion}"
        NAME = getRepoName()
        TIMESTAMP = sh(returnStdout: true, script: "date '+%Y%m%d%H%M%S'").trim()
        VERSION = "${GIT_COMMIT[0..6]}"
    }

    stages {

        stage('Build') {
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-registration-code', variable: 'SLES_REGISTRATION_CODE')
                ]) {
                    sh "make image"
                }
            }
        }

        stage('Publish') {
            steps {
                script {

                    // Only overwrite an image if this is a stable build.
                    if (isStable) {
                        /*
                        Publish these tags on stable:
                            - Major.Minor-Hash-Timestamp    (e.g. 1.18-dhckj3-20221017133121)
                            - Major.Minor-Hash-Timestamp    (e.g. 1.18-dhckj3)
                            - Major.Minor                   (e.g. 1.18)
                        */
                        publishCsmDockerImage(image: env.NAME, isStable: isStable, tag: "${goVersion}")
                        publishCsmDockerImage(image: env.NAME, isStable: isStable, tag: "${goVersion}-${env.VERSION}")
                        publishCsmDockerImage(image: env.NAME, isStable: isStable, tag: "${goVersion}-${env.VERSION}-${env.TIMESTAMP}")
                    } else {
                        /*
                        Publish these tags on unstable:
                            - Hash                          (e.g. dhckj3)
                            - Hash-Timestamp                (e.g. dhckj3-20221017133121)
                        */
                        publishCsmDockerImage(image: env.NAME, isStable: isStable, tag: "${env.VERSION}")
                        publishCsmDockerImage(image: env.NAME, isStable: isStable, tag: "${env.VERSION}-${env.TIMESTAMP}")
                    }
                }
            }
        }
    }
}
